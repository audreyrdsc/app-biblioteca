package com.unifap.biblioteca.controllers;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;

@SpringBootTest
public class HomeControllerTest {

    //Suporte ao teste MVC
    private MockMvc mockMvc;

    //Inje√ß√£o de depend√™ncia com a classe HomeController
    @Autowired
    private HomeController homeController;

    //Configura√ß√£o antes de cada teste
    @BeforeEach
    public void setup() {
        this.mockMvc = standaloneSetup(homeController)
                .build();
    }

    /*Teste para verificar o valor da home
    Verifica que a requisi√ß√£o GET para / retorna:
    C√≥digo HTTP 200 (OK)
    A view correta chamada "index"
    O atributo de modelo "menu" com valor "home"
     */
    @Test
    public void testPassarAtributoCorreto() throws Exception {
        this.mockMvc.perform(get("/"))
                .andDo(print()).andExpectAll(status().isOk())
                .andExpect(view().name("index"))
                .andExpect(model().attribute("menu", "home"));
    }

    /*Teste para verificar o valor da home
    Esse teste deve falhar de prop√≥sito, pois o atributo "model" n√£o existe no Model da view.
    Est√° sendo usado para verificar o que acontece quando um atributo incorreto √© verificado.
    Serve como exemplo de teste negativo
    Vai falhar com erro de java.lang.AssertionError, indicando que o atributo "model" n√£o est√° presente.
     */
    @Test
    public void testFalharAtributoIncorreto() throws Exception {
        this.mockMvc.perform(get("/"))
                .andDo(print()).andExpectAll(status().isOk())
                .andExpect(view().name("index"))
                .andExpect(model().attribute("model", "home"));
    }

    /* Verificar se o atributo menu est√° presente
    Garante que o atributo "menu" est√° presente no Model, independentemente do valor.
    √ötil quando n√£o √© necess√°rio verificar o valor, apenas a exist√™ncia do atributo.
     */
    @Test
    public void testVerificarAtributoPresente() throws Exception {
        this.mockMvc.perform(get("/"))
                .andExpect(status().isOk())
                .andExpect(model().attributeExists("menu"));
    }

    /* Verificar se a view existe mesmo sem atributos
    Verifica apenas se a view retornada √© "index" e que a requisi√ß√£o retornou status HTTP 200.
üîç  Esse teste √© √∫til para checagens mais simples, sem depend√™ncia de atributos no model.
     */
    @Test
    public void testSomenteViewCorreta() throws Exception {
        this.mockMvc.perform(get("/"))
                .andExpect(status().isOk())
                .andExpect(view().name("index"));
    }


}
